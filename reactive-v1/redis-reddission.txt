							Redis Reddision
							----------------------

Jedis 
	Fast but not Thread safe and not scalable

lettuce:
	Scalable and supports reactive streams
	Works Spring data redis
	
Redission:
	Scalable and supports reactive streams
	Works Spring data redis
	Excellent abstraction and has corresponding equivalent java collections
	
	

LocalCachedMap : Get the notification from redis when a key is expire:
----------------------------------------------------
config set notify-keyspace-events AKE 		-- need this command to get the expired events from Redis.
https://redis.io/docs/manual/keyspace-notifications/

// LocalCachedMap is used to cache the whole hash in the application itself to avoid to going to redis in network
// and also we can set the time to live in the application
// if any updates happen, it will publish to all the application who are subcribed to it

/* if any update happens in redis,
 * SyncStrategy.NONE - do not publish to any apps if any update happens in redis and the redis is have the updated data and apps not
 * SyncStrategy.INVALIDATE - removes the invalidate data in other instances and upon requesting, apps will get the new data
 * SyncStrategy.UPDATE  - publish to all instance with latest data and get reflected in apps
 * 
 * ReconnectionStrategy.CLEAR - if the connection b/w app and redis is down for a while due to redis is down or any, 
 * the app will serve the data with its local copy  and the connection is alive,
 * the app data get cleared and get the latest from redis
 * eventhough the SyncStrategy is update redis cannot publish new data to the app due to its connectivity issue.
 * ReconnectionStrategy.NONE - the client will serve the data always with its local copy irrespective of any update happens in redis by other apps
 * */


/* UPDATE, NONE - app1 gets the data, app2 updates the data in redis, 
* redis publish the latest data to apps  due to SyncStrategy is none
* so app1 gets the latest data,  
*
*/

/* NONE, NONE - app1 gets the data, app2 updates the data in redis, 
* redis does not publish the latest data to apps due to SyncStrategy is none
* so app1 serve the stale data
*
*/

/* NONE, CLEAR - app1 gets the data, app2 updates the data in redis, 
* redis does not publish the latest data to apps due to SyncStrategy is none
* app1 still serves the local stale data, make redis down and broke the connection, 
* app1 still serves the local stale data,
* make redis up and reconnection happens from app1 to redis, 
* now app1 gets the latest data due to ReconnectionStrategy strategy clear even though SyncStrategy is none
*
* The app gets the latest data whenever app reconnects to redis due to connection breakout with app and the redis
* and app tries to reconnect and the latest data. If there is reconnection happens, it will serve the stale data
*
*/

/* UPDATE, CLEAR - app1 gets the data, app2 updates the data in redis, 
* redis publish the latest data to apps due to SyncStrategy is Update
* app1 serves the latest data, make redis down and broke the connection, 
* app1 still serves the local stale data,
* make redis up and reconnection happens from app1 to redis, 
* now app1 still get the latest data again from redis due to ReconnectionStrategy strategy clear
*/


HyperLogLog:	
------------

Propabilitistic data structure - gives estimation close to actual result without storing the unique datasets

In a heavy user loads, it is required to track unique products that user purchasing. in this case, Set can be used and grows large, the performance will not be good
Here HyperLogLog is suggested if it is ok to have a  estimation close to actual result without storing the unique datasets
The HyperLogLog size would 12.5 kb and will not occupy more memory


Message Queue and Pub/Sub:
-------------------------
In Message Queue, there will  be a producer who keeps on adding messages into Queue. 
We can have any number of consumers to process the messages.
If there are no comsumers, messages will be waiting in the queue. 
So whenever consumers come online, they can poll and start processing th messages.
Also messages would be distributed among the consumers if consumers are many.

Consider producer produced messages 1 to 10. Consumer one take item 1 and consumer 2 cannot take item 1 since it is taken by another consumer.
So no duplicate processing


Pub/Sub - Like announcements.
When the publisher publish the information, every subscriber can listen the information. But they have to be in online
Example : slack, chat applications usesthis model

Also LocalCachedMap uses  this model.


Reddision Summary:
-----------------
Redis client library for java
Much better abstraction compared other libraries
Behind the scenes, it uses the Redis commands and givesmore abstraction to the developers

Redis:											Reddision											
------------									------------
SET Key Value									Bucket/ AtomicLong
Hash											Map, MapCache, LocalCacheMap
List											List, Queue, Deque, MessageQueue
Set												Set
SortedSet										SortedSet, PriorityQueue


Batch Commands:
 - to save network round           
 - reactive objects are proxy objects and used without any subscriptions
 
Transaction;	
 - make a set of commands atomic (prefer LuaScript)

Pub/Sub:
 - Message Broadcasting (LocalCacheMap)
 
