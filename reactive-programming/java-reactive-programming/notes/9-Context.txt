Context:
	Consider a bookservice exposing api via httpservice. A get method to get the book details.
	The api endpoint is restricted to add security to allow only the authenticated users.
	In this case, we will be using http header to provide additional information like cookie
	Headers are simple  key value pairs like map
	
	Context are also like http headers as map to provide additional information about the request.
	Context are set by downstream and can be view/update only by upstream and not view by his downstream who is created the context.
	Context are thread safe by default and immutable. When context update happens,  a new instance is created.
	
	
	
	Create a Mono provider that will supply a target Monoto subscribe to for each Subscriber downstream.
	This operator behaves the same way as defer(Supplier), 	but accepts a Function that will receive the current ContextView as an argument. 


	Type Parameters:
		<T> the element type of the returned Mono instance

	Parameters:
		contextualMonoFactory a Mono factory
		
	Returns:
		a deferred Mono deriving actual Mono from context values for each subscription
		
		
	Mono.deferContextual(ctx -> {
		if(ctx.hasKey("user")){
			return Mono.just("Welcome  " + ctx.get("user"));
		}else{
			return Mono.error(new RuntimeException("unauthenticated"));
		}
	});