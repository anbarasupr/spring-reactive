															Combining Publishers:
	

startsWith: 	Flux<String> reactor.core.publisher.Flux.startWith(Publisher<? extends String> publisher)
	Prepend the given Publisher sequence to this Flux sequence. 
	
	starts with this publisher for the requested items and emits them, if more required generate using the main publisher
	
	Consider two publishers p1, p2 and exposed these as a single publisher to the consumer
	When subscriber subscribes the publisher, it will always drain the data from publisher p1 which acts as prepend publisher.
	Once the p1 signal complete, then it goes to the publisher p2.
	
	If subscriber cancels, then the cancel request dont even go to p2 and p1 itself handle it.
	
	
concat / concatWith / concatDelayError:
	Used to combine two reactive streams into one
	Concatenation of reactice streams happens in a sequence. Merge happens one by one when it completes
	First one is subscribed first and completes, Second one subscribed after that and then completes
	concat() is a static method in Flux, 	concatWith() is a instance method in Flux and Mono
	
	subscribes to the publishers in a sequence
	
	If any error signal is produced by any of flux, then concat operation stops there from emitting
	To overcome this, use concatDelayError. It wont stop if error is produced by a publisher and executes all publishers 
	
	
	
merge() and mergeWith():
	Both the publishers are subscribed at the same time
	Publishers are subscribed eagerly and the merge happens in interleaved fashion. if any of publisher is producing items, then it will wait.
	merge() is a static method in Flux,	 mergeWith() is a instance method in Flux and Mono
	
	Merge data from Publisher sequences contained in an array / vararginto an interleaved merged sequence. Unlike concat,sources are subscribed to eagerly. 
	Note that merge is tailored to work with asynchronous sources or finite sources. 



zip() and zipWith():
	zip() is a static method in Flux and Can be used to merge upto 2 to 8 publishers (Flux or Mono) into one
	zipWith() is an instance method in both Flux and Mono. Used to merge two publishers into one
	Publishers are subscribed eagerly
	Waits for all the publishers involved in the transformation to emit one element
	Continues until one publisher sends an onComplete event

 
combineLatest:
	combine the latest items from all of the publishers
	Build a Flux whose data are generated by the combination of the most recently published value from each of two Publisher sources. 