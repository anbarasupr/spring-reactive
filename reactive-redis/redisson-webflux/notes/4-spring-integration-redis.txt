						Spring Integration With Redis:
						-----------------------------


Use case 1 :Caching
---------------------------

Reduce load  on DB
	- Avoid same query execution
Avoid tons of network calls
	- Storing Api responses
Avoid rework
	- Storing the complex computational results
Better Throughput
Improved application response time
Better user experience
	
	
Spring Data Reactive Redis:
---------------------------
	- have performance issues
	- no support for reactive crud repository
	- some annotations do not work with reactive type
	
	
@Cacheable /@CacheEvict / @CachePut
----------------------------------
@Cacheable
	Skip the method execution if key is present
	Do the method execution only if the key is not present and cache the result
@CacheEvict
	Do the method execution always and Evict/Remove the corresponding cache
	Evict happens after method execution. (use beforeInvocation property otherwise)
@CachePut
	Do the method execution always and update the corresponding cache
	

Cache Annottations:
	Easy to sue
	Limitations
		No TTL time to Live support in annotations
		Not a lot of flexibility
		Does not work with publishers becuase the method contains the pipeline not the business logic to execute,
		the execution of pipeline is entirely depends on the subscriber. ( Note: reactor has some skeleton to use acheive this)
		
		
java -jar city-api.jar

JMeter:
-------
Throughput:
	No of request processed by your server per unit time
	
Jmeter Report generation:
Jmeter bin: 
	./jmeter -n -t product-service/product-service.jmx -l product-service/v1-jtl
Aggregate Report:
	Test Plan -> RightClick -> Add -> Listener -> Aggregate Report
	

GeoSpatial:
-----------

	Store information / an object with latitude and longitude
	Search for nearby objects
		Ex: Houses for sale
	Find distance between two objects